openapi: 3.0.0
info:
  title: Comprehensive API
  version: 1.0.0
servers:
  - url: 'https://example.com/api'
paths:
  /actions/count:
    get:
      summary: Get count of pending actions
      operationId: getPendingActionsCount
      responses:
        '200':
          description: Successful response with counts of pending item grants and player messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  itemGrantsCount:
                    type: integer
                    example: 10
                  playerMessagesCount:
                    type: integer
                    example: 5
  /actions/log:
    get:
      summary: Get log of actions sorted by creation date
      operationId: getActionsLog
      responses:
        '200':
          description: Successful response with a list of actions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
  /user-actions:
    get:
      summary: Get actions initiated by the authenticated user
      operationId: getActionsByUser
      responses:
        '200':
          description: Successful response with a list of actions initiated by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
        '400':
          description: Invalid user error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid user.'
  /login:
    post:
      summary: User login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'user@example.com'
                password:
                  type: string
                  example: 'yourpassword123'
      responses:
        '200':
          description: Successful login with user data and token
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    example: 'user@example.com'
                  token:
                    type: string
                    example: 'fake_jwt_token_here'
        '401':
          description: Unauthorized - User not found or invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User not found or invalid credentials'
  /item:
    get:
      summary: Display item page
      operationId: displayItemPage
      responses:
        '200':
          description: HTML content of the item page
          content:
            text/html:
              schema:
                type: string
                example: '<html>...</html>'
  /api/items:
    get:
      summary: Get all items
      operationId: getItems
      responses:
        '200':
          description: A JSON array of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  /item-grants:
    post:
      summary: Create a new item grant
      operationId: createItemGrant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: integer
                  description: Array of item IDs to grant
      responses:
        '201':
          description: Item grant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemGrant'
        '400':
          description: Bad request, could be due to invalid JSON or validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'error'
                  message:
                    type: string
                    example: 'Invalid JSON'
  /item-grants/{id}/status:
    patch:
      summary: Update status of an item grant
      operationId: updateItemGrantStatus
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the item grant to update
          schema:
            type: integer
      responses:
        '200':
          description: Item grant status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemGrant'
  /item-grants/pending:
    get:
      summary: Get pending item grants
      operationId: getPendingItemGrants
      responses:
        '200':
          description: List of pending item grants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemGrant'
  /player-messages:
    post:
      summary: Create a new player message
      operationId: createPlayerMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerMessageCreateRequest'
      responses:
        '201':
          description: Player message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerMessage'
        '400':
          description: Bad request due to validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'error'
                  message:
                    type: string
                    example: 'Invalid data'
  /player-messages/{id}/status:
    patch:
      summary: Update the status of an existing player message
      operationId: updatePlayerMessageStatus
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the player message to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: 'Approved'
      responses:
        '200':
          description: Player message status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerMessage'
  /player-messages/pending:
    get:
      summary: Retrieve all pending player messages
      operationId: getPendingPlayerMessages
      responses:
        '200':
          description: List of pending player messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlayerMessage'
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - roles
                - avatar
              properties:
                username:
                  type: string
                  example: 'newuser'
                email:
                  type: string
                  example: 'user@example.com'
                password:
                  type: string
                  example: 'securepassword123'
                roles:
                  type: array
                  items:
                    type: string
                  example: ['ROLE_USER']
                avatar:
                  type: string
                  example: 'path/to/avatar.png'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User created successfully.'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Access Denied.'
        '400':
          description: Bad request due to validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Validation failed.'
    get:
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
components:
  schemas:
    Action:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: 'ItemGrant'
        status:
          type: string
          example: 'Approved'
        createdAt:
          type: string
          format: date-time
          example: '2021-04-02T17:00:43Z'
        initiator:
          type: integer
          example: 102
    Item:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Example Item'
        description:
          type: string
          example: 'This is an example description of an item.'
        price:
          type: number
          format: float
          example: 19.99
    ItemGrant:
      type: object
      properties:
        id:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        status:
          type: string
          example: 'Pending'
    PlayerMessage:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: 'Hello, your quest starts now!'
        status:
          type: string
          example: 'Pending'
    PlayerMessageCreateRequest:
      type: object
      properties:
        content:
          type: string
          example: 'Hello, your quest starts now!'
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: 'user123'
        email:
          type: string
          example: 'user@example.com'
        roles:
          type: array
          items:
            type: string
          example: ['ROLE_USER']
        avatar:
          type: string
          example: 'path/to/avatar.jpg'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT